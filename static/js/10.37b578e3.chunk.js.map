{"version":3,"file":"static/js/10.37b578e3.chunk.js","mappings":"8QA0BaA,GAxBeC,EAAAA,EAAAA,OAAH,+HASJA,EAAAA,EAAAA,EAAH,yIAQGA,EAAAA,EAAAA,IAAH,+FAOUA,EAAAA,EAAAA,IAAH,+MAUZC,EAAmBD,EAAAA,EAAAA,GAAH,wFAMhBE,EAAYF,EAAAA,EAAAA,KAAH,sBAETG,EAAaH,EAAAA,EAAAA,MAAH,qIAQVI,EAAaJ,EAAAA,EAAAA,MAAH,kEAKVK,EAAWL,EAAAA,EAAAA,OAAH,sT,oBCtCjBM,EAAS,eAACC,EAAD,uDAAQ,GAAR,OACXC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP,K,SCnBQG,EAAoB,WAC/B,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAgBC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,YAEpDC,EAAcvB,IACdwB,EAAgBxB,IAEhByB,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,OACHf,EAAagB,GAEb,MAEF,IAAK,SACHd,EAAec,GACf,MAEF,QACE,SAmBN,OACE,UAACpC,EAAD,YACE,SAACE,EAAD,yBACA,UAACC,EAAD,CAAWkC,SAlBM,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAa,CAAE3B,GAAIN,IAAU4B,KAAMhB,EAAWsB,OAAQpB,GACrCI,EAAciB,MACnC,SAAAC,GAAI,OAAIA,EAAKR,KAAKS,gBAAkBzB,EAAUyB,iBAG9CC,MAAM,GAAD,OAAI1B,EAAJ,8BAGPI,EAASuB,EAAAA,GAAiCN,IAC1CpB,EAAa,IACbE,EAAe,MAMb,WACE,UAAClB,EAAD,mBAEE,SAACC,EAAD,CACE0C,KAAK,OACLZ,KAAK,OACLtB,GAAIiB,EACJkB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRd,MAAOjB,EACPgC,SAAUnB,QAGd,UAAC5B,EAAD,qBAEE,SAACC,EAAD,CACE0C,KAAK,MACLlC,GAAIkB,EACJI,KAAK,SACLa,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRd,MAAOf,EACP8B,SAAUnB,QAGd,SAAC1B,EAAD,CAAUyC,KAAK,SAAf,iC,UCnFKK,EAAkBnD,EAAAA,EAAAA,IAAH,uLASfoD,EAAepD,EAAAA,EAAAA,GAAH,4DAKZqD,EAAerD,EAAAA,EAAAA,GAAH,+KASZsD,EAAmBtD,EAAAA,EAAAA,EAAH,wFAMhBuD,EAAcvD,EAAAA,EAAAA,OAAH,uTAoBXwD,EAAYxD,EAAAA,EAAAA,IAAH,mHCRtB,GDeuBA,EAAAA,EAAAA,IAAH,6CC9CI,SAAC,GAA0B,IAAxBkC,EAAuB,EAAvBA,KAAMM,EAAiB,EAAjBA,OAAQ5B,EAAS,EAATA,GACvC,GAA0BK,EAAAA,EAAAA,UAAS,MAAnC,eAAOwC,EAAP,KAAcC,EAAd,KACMC,GAAUlC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASgC,WAC9CrC,GAAWC,EAAAA,EAAAA,MAEjB,MAAgB,WAAZoC,GAAkC,OAAVF,GAExB,SAACD,EAAD,CAAWI,UAAU,gBAArB,UACE,SAACC,EAAA,EAAD,CAAetD,KAAM,GAAIuD,MAAO,eAKpC,UAACT,EAAD,YACE,UAACC,EAAD,WACGpB,EADH,KACWM,MAGX,SAACe,EAAD,CACET,KAAK,SACLiB,QAAS,WACPL,EAAS9C,GACTU,EAASuB,EAAAA,GAAiC,CAAEjC,GAAAA,EAAIsB,KAAAA,MAJpD,yBCkBN,EAxCoB,WAClB,IAAM8B,GAASvC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMsC,UACpCC,GAAYxC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,YAChDN,GAAWC,EAAAA,EAAAA,MACXoC,GAAUlC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASgC,WAMpD,IAJAO,EAAAA,EAAAA,YAAU,WACR5C,EAASuB,EAAAA,GAA+B,OACvC,CAACvB,IAEA2C,EAAW,CACb,IAMME,EALGF,EAAUD,QAAO,SAAAI,GAAO,OAC7BA,EAAQlC,KAAKS,cAAc0B,SAASL,EAAOrB,kBAK/C,OACEwB,EAAiBG,OAAS,IACxB,SAACnB,EAAD,WACE,SAACC,EAAD,UACGe,EAAiBI,KAAI,gBAAG3D,EAAH,EAAGA,GAAIsB,EAAP,EAAOA,KAAMM,EAAb,EAAaA,OAAb,OACpB,SAAC,EAAD,CAA0BN,KAAMA,EAAMM,OAAQA,EAAQ5B,GAAIA,GAApCA,UAQlC,MAAgB,WAAZ+C,GACK,+CAGO,YAAZA,GACK,SAACE,EAAA,EAAD,CAAetD,KAAM,IAAKuD,MAAO,iBAD1C,GCzCWU,EAAgBxE,EAAAA,EAAAA,IAAH,6RAcbyE,EAAazE,EAAAA,EAAAA,EAAH,wFAMV0E,EAAc1E,EAAAA,EAAAA,MAAH,kE,UCjBT,SAAS2E,IACtB,IAAMrD,GAAWC,EAAAA,EAAAA,MACXqD,GAAcnD,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASqC,UAKxD,OACE,UAACQ,EAAD,YACE,SAACC,EAAD,qCACA,SAACC,EAAD,CACE5B,KAAK,OACLX,MAAOyC,EACP1B,SAToB,SAAAb,GACxBf,GAASuD,EAAAA,EAAAA,GAAOxC,EAAIJ,OAAOE,cCRxB,IAAM2C,EAAY9E,EAAAA,EAAAA,IAAH,gLASDA,EAAAA,EAAAA,GAAH,wFCLH,SAAS+E,KACtB,IAAMvD,GAAgBC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,YAC1D,OACE,UAACkD,EAAD,YACE,SAAC9D,EAAD,KACA,2BACGQ,EAAc8C,OAAS,IAAK,SAACK,EAAD,KAC7B,SAAC,EAAD","sources":["components/phonebook/Phonebook.styled.jsx","../node_modules/nanoid/index.browser.js","components/phonebook/Phonebook.jsx","components/contacts/Contact.styled.jsx","components/contacts/ContactsItem.jsx","components/contacts/ContactsList.jsx","components/filter/Filter.styled.jsx","components/filter/Filter.jsx","components/App.styled.jsx","components/contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledButton = styled.button`\n  position: fixed;\n  left: 94%;\n  top: 85%;\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n`;\n\nexport const Title = styled.p`\n  text-align: center;\n  text-transform: uppercase;\n  margin: 0 0 18px;\n  font-size: 20px;\n  color: #4169e1;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  margin: auto;\n  width: 300px;\n  height: 300px;\n`;\n\nexport const PhoneSection = styled.div`\n  width: 400px;\n  margin-right: 40px;\n  border: 2px solid #9e9e9e;\n  border-radius: 4px;\n  margin-top: 10px;\n  padding: 10px;\n  box-shadow: 0px 4px 4px hsla(0, 0%, 0%, 0.15);\n`;\n\nexport const PhoneSectionName = styled.h2`\n  font-weight: 900;\n  font-size: 25px;\n  text-align: center;\n`;\n\nexport const PhoneForm = styled.form``;\n\nexport const PhoneLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 8px;\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nexport const PhoneInput = styled.input`\n  padding: 8px;\n  font-family: inherit;\n`;\n\nexport const PhoneBtn = styled.button`\n  display: inline-flex;\n  margin: 0 4px;\n  padding: 12px 24px;\n  border: none;\n  border-radius: 4px;\n\n  font-family: sans-serif;\n  font-size: 16px;\n\n  background-color: #2196f3;\n  color: #fff;\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    background-color: #1976d2;\n  }\n`;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState } from 'react';\nimport {\n  PhoneSection,\n  PhoneSectionName,\n  PhoneForm,\n  PhoneLabel,\n  PhoneInput,\n  PhoneBtn,\n} from './Phonebook.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as contactsOperations from '../../redux/Contacts/Contacts-operations';\nimport { nanoid } from 'nanoid';\n\nexport const PhonebookSectionp = () => {\n  const [nameInput, setNameInput] = useState('');\n  const [numberInput, setNumberInput] = useState('');\n  const dispatch = useDispatch();\n  const contactsState = useSelector(state => state.contacts.entities);\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setNameInput(value);\n\n        break;\n\n      case 'number':\n        setNumberInput(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const newContact = { id: nanoid(), name: nameInput, number: numberInput };\n    const contactInState = contactsState.some(\n      item => item.name.toLowerCase() === nameInput.toLowerCase()\n    );\n    if (contactInState) {\n      alert(`${nameInput} is already in contacts!`);\n      return;\n    }\n    dispatch(contactsOperations.createContact(newContact));\n    setNameInput('');\n    setNumberInput('');\n  };\n\n  return (\n    <PhoneSection>\n      <PhoneSectionName>Phonebook</PhoneSectionName>\n      <PhoneForm onSubmit={handleSubmit}>\n        <PhoneLabel>\n          Name\n          <PhoneInput\n            type=\"text\"\n            name=\"name\"\n            id={nameInputId}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={nameInput}\n            onChange={handleChange}\n          />\n        </PhoneLabel>\n        <PhoneLabel>\n          Number\n          <PhoneInput\n            type=\"tel\"\n            id={numberInputId}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={numberInput}\n            onChange={handleChange}\n          />\n        </PhoneLabel>\n        <PhoneBtn type=\"submit\">Add contacts</PhoneBtn>\n      </PhoneForm>\n    </PhoneSection>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactsSection = styled.div`\n  width: 500px;\n  border: 2px solid #9e9e9e;\n  border-radius: 4px;\n  margin-top: 10px;\n  padding: 10px;\n  box-shadow: 0px 4px 4px hsla(0, 0%, 0%, 0.15);\n`;\n\nexport const ContactsList = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nexport const ContactsItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border: 1px solid #9e9e9e;\n  border-radius: 10px;\n  padding: 0 10px;\n`;\n\nexport const ContactsItemName = styled.p`\n  margin-bottom: 8px;\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nexport const ContactsBtn = styled.button`\n  display: inline-flex;\n  margin: 0 4px;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 10px;\n\n  font-family: sans-serif;\n  font-size: 16px;\n\n  background-color: #2196f3;\n  color: #fff;\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    background-color: #1976d2;\n  }\n`;\n\nexport const LoaderBox = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 10px;\n`;\n\nexport const Wrapper = styled.div`\n  margin-top: 50px;\n`;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { SpinnerDotted } from 'spinners-react';\nimport {\n  ContactsItem,\n  ContactsItemName,\n  ContactsBtn,\n  LoaderBox,\n} from './Contact.styled';\nimport * as contactsOperations from '../../redux/Contacts/Contacts-operations';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst ContactListItem = ({ name, number, id }) => {\n  const [btnId, setBtnId] = useState(null);\n  const loading = useSelector(state => state.contacts.loading);\n  const dispatch = useDispatch();\n\n  if (loading === 'delete' && btnId !== null) {\n    return (\n      <LoaderBox className=\"sweet-loading\">\n        <SpinnerDotted size={50} color={'#0d64ef'} />\n      </LoaderBox>\n    );\n  }\n  return (\n    <ContactsItem>\n      <ContactsItemName>\n        {name}: {number}\n      </ContactsItemName>\n\n      <ContactsBtn\n        type=\"button\"\n        onClick={() => {\n          setBtnId(id);\n          dispatch(contactsOperations.deleteContact({ id, name }));\n        }}\n      >\n        Delete\n      </ContactsBtn>\n    </ContactsItem>\n  );\n};\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { SpinnerDotted } from 'spinners-react';\nimport ContactListItem from './ContactsItem';\nimport { ContactsSection, ContactsList } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\nimport * as contactsOperations from '../../redux/Contacts/Contacts-operations';\n\nconst ContactList = () => {\n  const filter = useSelector(state => state.filter);\n  const dataState = useSelector(state => state.contacts.entities);\n  const dispatch = useDispatch();\n  const loading = useSelector(state => state.contacts.loading);\n\n  useEffect(() => {\n    dispatch(contactsOperations.getContacts(''));\n  }, [dispatch]);\n\n  if (dataState) {\n    const getFilteredContacts = () => {\n      return dataState.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    };\n\n    const filteredContacts = getFilteredContacts();\n    return (\n      filteredContacts.length > 0 && (\n        <ContactsSection>\n          <ContactsList>\n            {filteredContacts.map(({ id, name, number }) => (\n              <ContactListItem key={id} name={name} number={number} id={id} />\n            ))}\n          </ContactsList>\n        </ContactsSection>\n      )\n    );\n  }\n\n  if (loading === 'failed') {\n    return <h1>Contacts not found</h1>;\n  }\n\n  if (loading === 'pending') {\n    return <SpinnerDotted size={150} color={'#0d64ef'} />;\n  }\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilterSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  width: 500px;\n  border: 2px solid #9e9e9e;\n  border-radius: 50%;\n  margin-bottom: 15px;\n  padding: 10px;\n  box-shadow: 0px 4px 4px hsla(0, 0%, 0%, 0.15);\n`;\n\nexport const FilterName = styled.p`\n  margin-bottom: 8px;\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 8px;\n  font-family: inherit;\n`;\n","import React from 'react';\nimport { FilterSection, FilterName, FilterInput } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { change } from 'redux/filterSlice';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filterState = useSelector(state => state.contacts.filter);\n\n  const filterStateChange = evt => {\n    dispatch(change(evt.target.value));\n  };\n  return (\n    <FilterSection>\n      <FilterName>Find contacts by name</FilterName>\n      <FilterInput\n        type=\"text\"\n        value={filterState}\n        onChange={filterStateChange}\n      />\n    </FilterSection>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding-left: 15px;\n  padding-right: 15px;\n  display: flex;\n  justify-content: space-between;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Title = styled.h1`\n  font-weight: 900;\n  font-size: 40px;\n  text-align: center;\n`;\n","import { PhonebookSectionp } from '../phonebook/Phonebook';\nimport ContactList from './ContactsList';\nimport Filter from '../filter/Filter';\nimport { Container } from '../App.styled';\nimport { useSelector } from 'react-redux';\n\nexport default function Contacts() {\n  const contactsState = useSelector(state => state.contacts.entities);\n  return (\n    <Container>\n      <PhonebookSectionp />\n      <div>\n        {contactsState.length > 0 && <Filter />}\n        <ContactList />\n      </div>\n    </Container>\n  );\n}\n"],"names":["PhoneSection","styled","PhoneSectionName","PhoneForm","PhoneLabel","PhoneInput","PhoneBtn","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","PhonebookSectionp","useState","nameInput","setNameInput","numberInput","setNumberInput","dispatch","useDispatch","contactsState","useSelector","state","contacts","entities","nameInputId","numberInputId","handleChange","event","target","name","value","onSubmit","evt","preventDefault","newContact","number","some","item","toLowerCase","alert","contactsOperations","type","pattern","title","required","onChange","ContactsSection","ContactsList","ContactsItem","ContactsItemName","ContactsBtn","LoaderBox","btnId","setBtnId","loading","className","SpinnerDotted","color","onClick","filter","dataState","useEffect","filteredContacts","contact","includes","length","map","FilterSection","FilterName","FilterInput","Filter","filterState","change","Container","Contacts"],"sourceRoot":""}